{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\nexport const apiService = {\n  async makeRequest(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (!response.ok) throw new Error(data.message || data.error || `HTTP error! status: ${response.status}`);\n      return data;\n    } catch (error) {\n      console.error(\"API Request failed:\", error);\n      throw error;\n    }\n  },\n  async getTickets(filters = {}) {\n    const params = new URLSearchParams();\n    Object.entries(filters).forEach(([key, value]) => value && value !== \"all\" && params.append(key, value));\n    const endpoint = params.toString() ? `/tickets?${params.toString()}` : \"/tickets\";\n    return await this.makeRequest(endpoint);\n  },\n  async getTicketDetails(key) {\n    return await this.makeRequest(`/tickets/${key}/details`);\n  },\n  async createTicket(data) {\n    return await this.makeRequest(\"/tickets\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        summary: data.summary,\n        description: data.description,\n        issueType: data.issueType,\n        priority: data.priority,\n        assignee: data.assignee\n      })\n    });\n  },\n  async updateTicket(key, data) {\n    return await this.makeRequest(`/tickets/${key}`, {\n      method: \"PUT\",\n      body: JSON.stringify(data)\n    });\n  },\n  async deleteTicket(key) {\n    return await this.makeRequest(`/tickets/${key}`, {\n      method: \"DELETE\"\n    });\n  },\n  async getTransitions(key) {\n    return await this.makeRequest(`/tickets/${key}/transitions`);\n  },\n  async transitionTicket(key, transitionName, comment = null) {\n    return await this.makeRequest(`/tickets/${key}/transition`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        transition_name: transitionName,\n        comment\n      })\n    });\n  },\n  async getStats() {\n    return await this.makeRequest(\"/stats\");\n  },\n  async healthCheck() {\n    return await this.makeRequest(\"/health\");\n  },\n  async getAnalytics() {\n    return await this.makeRequest(\"/analytics\");\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","apiService","makeRequest","endpoint","options","url","config","headers","response","fetch","data","json","ok","Error","message","error","status","console","getTickets","filters","params","URLSearchParams","Object","entries","forEach","key","value","append","toString","getTicketDetails","createTicket","method","body","JSON","stringify","summary","description","issueType","priority","assignee","updateTicket","deleteTicket","getTransitions","transitionTicket","transitionName","comment","transition_name","getStats","healthCheck","getAnalytics"],"sources":["/home/abdou/stage2/jira_final_project/jira_project/src/apiService.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\n\nexport const apiService = {\n  async makeRequest(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config = {\n      headers: { \"Content-Type\": \"application/json\", ...options.headers },\n      ...options,\n    };\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (!response.ok) throw new Error(data.message || data.error || `HTTP error! status: ${response.status}`);\n      return data;\n    } catch (error) {\n      console.error(\"API Request failed:\", error);\n      throw error;\n    }\n  },\n\n  async getTickets(filters = {}) {\n    const params = new URLSearchParams();\n    Object.entries(filters).forEach(([key, value]) => value && value !== \"all\" && params.append(key, value));\n    const endpoint = params.toString() ? `/tickets?${params.toString()}` : \"/tickets\";\n    return await this.makeRequest(endpoint);\n  },\n\n  async getTicketDetails(key) {\n    return await this.makeRequest(`/tickets/${key}/details`);\n  },\n\n  async createTicket(data) {\n    return await this.makeRequest(\"/tickets\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        summary: data.summary,\n        description: data.description,\n        issueType: data.issueType,\n        priority: data.priority,\n        assignee: data.assignee,\n      }),\n    });\n  },\n\n  async updateTicket(key, data) {\n    return await this.makeRequest(`/tickets/${key}`, {\n      method: \"PUT\",\n      body: JSON.stringify(data),\n    });\n  },\n\n  async deleteTicket(key) {\n    return await this.makeRequest(`/tickets/${key}`, { method: \"DELETE\" });\n  },\n\n  async getTransitions(key) {\n    return await this.makeRequest(`/tickets/${key}/transitions`);\n  },\n\n  async transitionTicket(key, transitionName, comment = null) {\n    return await this.makeRequest(`/tickets/${key}/transition`, {\n      method: \"POST\",\n      body: JSON.stringify({ transition_name: transitionName, comment }),\n    });\n  },\n\n  async getStats() {\n    return await this.makeRequest(\"/stats\");\n  },\n\n  async healthCheck() {\n    return await this.makeRequest(\"/health\");\n  },\n\n  async getAnalytics() {\n    return await this.makeRequest(\"/analytics\");\n  },\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}